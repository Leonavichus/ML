import streamlit as st
import pandas as pd
import altair as alt
from typing import Dict, Callable, List, Tuple
from pandas.errors import EmptyDataError, ParserError
from streamlit.runtime.uploaded_file_manager import UploadedFile
from src.model_transactions import (
    train_iforest, train_ocsvm, train_lof,
    enrich
)
from logging import getLogger

logger = getLogger(__name__)

st.set_page_config(
    page_title="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ | Analytics App",
    page_icon="üí±",
    layout="wide"
)

# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
MODEL_OPTIONS: Dict[str, Callable] = {
    "Isolation Forest": train_iforest,
    "One-Class SVM": train_ocsvm,
    "Local Outlier Factor": train_lof
}

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
REQUIRED_FIELDS = [
    ("timestamp", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
    ("hour_of_day", "–ß–∞—Å —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
    ("amount", "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
    ("transaction_type", "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
    ("location_region", "–†–µ–≥–∏–æ–Ω –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"),
    ("ip_prefix", "–ü—Ä–µ—Ñ–∏–∫—Å IP-–∞–¥—Ä–µ—Å–∞"),
    ("login_frequency", "–ß–∞—Å—Ç–æ—Ç–∞ –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É"),
    ("session_duration", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"),
    ("purchase_pattern", "–®–∞–±–ª–æ–Ω –ø–æ–∫—É–ø–æ–∫"),
    ("age_group", "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"),
]


def create_visualizations(df: pd.DataFrame) -> List[alt.Chart]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        df (pd.DataFrame): –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞–Ω–æ–º–∞–ª–∏—è–º–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[alt.Chart]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π
    hist = alt.Chart(df).mark_bar().encode(
        x=alt.X("AnomalyScore:Q", bin=alt.Bin(maxbins=50), title="–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"),
        y=alt.Y("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
        color=alt.Color(
            "AnomalyPred:N",
            scale=alt.Scale(domain=[1, -1], range=["#4caf50", "#e91e63"]),
            legend=alt.Legend(title="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        ),
        tooltip=[
            alt.Tooltip("AnomalyScore:Q", title="–û—Ü–µ–Ω–∫–∞"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"
    )

    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    pie = alt.Chart(df).mark_arc(innerRadius=50).encode(
        theta="count()",
        color=alt.Color(
            "AnomalyPred:N",
            scale=alt.Scale(domain=[1, -1], range=["#4caf50", "#e91e63"])
        ),
        tooltip=[
            alt.Tooltip("AnomalyPred:N", title="–¢–∏–ø"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("count():Q", title="–ü—Ä–æ—Ü–µ–Ω—Ç", format=".1%")
        ]
    ).properties(
        width=300,
        height=300,
        title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
    )

    # –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ —á–∞—Å–∞–º
    df_hours = df.groupby([
        df["timestamp"].dt.hour,
        "AnomalyPred"
    ]).size().reset_index(name="count")

    line = alt.Chart(df_hours).mark_line(point=True).encode(
        x=alt.X("timestamp:O", title="–ß–∞—Å –¥–Ω—è"),
        y=alt.Y("count:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
        color=alt.Color(
            "AnomalyPred:N",
            scale=alt.Scale(domain=[1, -1], range=["#4caf50", "#e91e63"])
        ),
        tooltip=[
            alt.Tooltip("timestamp:O", title="–ß–∞—Å"),
            alt.Tooltip("count:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("AnomalyPred:N", title="–¢–∏–ø")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º"
    )

    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º
    df["day_of_week"] = df["timestamp"].dt.day_name()
    df["hour"] = df["timestamp"].dt.hour

    heatmap = alt.Chart(df).mark_rect().encode(
        x=alt.X("hour:O", title="–ß–∞—Å"),
        y=alt.Y("day_of_week:O", title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                sort=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]),
        color=alt.Color("count(AnomalyPred)", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π"),
        tooltip=[
            alt.Tooltip("day_of_week:O", title="–î–µ–Ω—å"),
            alt.Tooltip("hour:O", title="–ß–∞—Å"),
            alt.Tooltip("count(AnomalyPred):Q", title="–ê–Ω–æ–º–∞–ª–∏–∏")
        ]
    ).transform_filter(
        alt.datum.AnomalyPred == -1
    ).properties(
        width=600,
        height=300,
        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π"
    )

    # –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –°—É–º–º–∞ vs –°–∫–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    sample = df.sample(min(1000, len(df)), random_state=42)
    scatter = alt.Chart(sample).mark_circle().encode(
        x=alt.X("amount:Q", title="–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
        y=alt.Y("AnomalyScore:Q", title="–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"),
        color=alt.Color(
            "AnomalyPred:N",
            scale=alt.Scale(domain=[1, -1], range=["#4caf50", "#e91e63"])
        ),
        size=alt.Size("risk_score:Q", title="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞"),
        tooltip=[
            alt.Tooltip("amount:Q", title="–°—É–º–º–∞"),
            alt.Tooltip("AnomalyScore:Q", title="–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"),
            alt.Tooltip("risk_score:Q", title="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞"),
            alt.Tooltip("transaction_type:N", title="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
            alt.Tooltip("location_region:N", title="–†–µ–≥–∏–æ–Ω")
        ]
    ).properties(
        width=600,
        height=300,
        title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    )

    # –ó–∞–º–µ–Ω—è–µ–º –±–æ–∫—Å–ø–ª–æ—Ç –Ω–∞ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    amount_distribution = alt.Chart(df).transform_density(
        'amount',
        as_=['amount', 'density'],
        groupby=['transaction_type', 'AnomalyPred'],
        steps=100
    ).mark_area(
        opacity=0.5
    ).encode(
        x=alt.X('amount:Q', title='–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'),
        y=alt.Y('density:Q', title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è', stack=None),
        color=alt.Color(
            'AnomalyPred:N',
            scale=alt.Scale(domain=[1, -1], range=['#4caf50', '#e91e63']),
            title='–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        ),
        row=alt.Row('transaction_type:N', title='–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'),
        tooltip=[
            alt.Tooltip('amount:Q', title='–°—É–º–º–∞', format=',.2f'),
            alt.Tooltip('density:Q', title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å'),
            alt.Tooltip('transaction_type:N', title='–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'),
            alt.Tooltip('AnomalyPred:N', title='–°—Ç–∞—Ç—É—Å –∞–Ω–æ–º–∞–ª–∏–∏')
        ]
    ).properties(
        height=100,
        title={
            "text": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            "fontSize": 16
        }
    ).configure_facet(
        spacing=10
    ).configure_view(
        stroke=None
    )

    return [hist, pie, line, heatmap, scatter, amount_distribution]


def read_user_data(uploaded_file: UploadedFile) -> pd.DataFrame:
    """
    –ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        uploaded_file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Streamlit

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º

    –í—ã–∑—ã–≤–∞–µ—Ç:
        ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ CSV –∏ Excel (.xlsx)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–µ –ø—É—Å—Ç–æ–π
        if df.empty:
            raise ValueError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
        if len(df.columns) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏")

        return df

    except EmptyDataError:
        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except ParserError:
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


def app():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –í—ã–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    - –í—ã–≥—Ä—É–∑–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    st.title("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    –í—ã –º–æ–∂–µ—Ç–µ:
    - –í—ã–±—Ä–∞—Ç—å –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
    - –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """)

    # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    st.markdown("### 1. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö:")

    method = st.selectbox(
        "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
        list(MODEL_OPTIONS.keys()),
        help="–ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π"
    )

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if st.button(f"–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å {method}", help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        try:
            with st.spinner(f"–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å {method}..."):
                df_raw = pd.read_csv("data/raw/metaverse_transactions_dataset.csv")
                MODEL_OPTIONS[method](df_raw, save=True)
            st.success(f"–ú–æ–¥–µ–ª—å {method} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! üéâ")
        except FileNotFoundError:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

    st.markdown("---")

    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### 2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

    uploaded = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV/Excel —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏",
        type=["csv", "xlsx"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã CSV –∏ Excel (.xlsx)"
    )

    if not uploaded:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_user = read_user_data(uploaded)

        st.markdown("### 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
        st.markdown("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –∏ —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏:")

        cols = df_user.columns.tolist()
        mapping = {}

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        col1, col2 = st.columns(2)
        for i, (field, label) in enumerate(REQUIRED_FIELDS):
            with col1 if i % 2 == 0 else col2:
                mapping[field] = st.selectbox(
                    f"{label} ‚Üí",
                    options=["<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>"] + cols,
                    key=f"map_trans_{field}",
                    help=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ {label}"
                )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        missing = [label for field, label in REQUIRED_FIELDS if mapping[field] == "<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>"]
        if missing:
            st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:\n- " + "\n- ".join(missing))
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            df_mapped = df_user.rename(columns={mapping[field]: field for field, _ in REQUIRED_FIELDS})

            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"):
                st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π:", df_mapped.head())

            # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
            try:
                df_enriched = enrich(df_mapped, method)
                df_enriched["timestamp"] = pd.to_datetime(df_enriched["timestamp"])

                if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                    st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:", df_enriched.head())

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
                total = len(df_enriched)
                anomalies = (df_enriched["AnomalyPred"] == -1).sum()
                normal = total - anomalies

                st.markdown("### 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", total)
                with col2:
                    st.metric("–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ", normal)
                with col3:
                    st.metric("–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ", anomalies)

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                st.markdown("### 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                charts = create_visualizations(df_enriched)
                for chart in charts:
                    st.altair_chart(chart)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.markdown("### 6. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                csv = df_enriched.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (CSV)",
                    csv,
                    "anomaly_enriched.csv",
                    mime="text/csv",
                    help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π"
                )

            except FileNotFoundError:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    except ValueError as e:
        st.error(f"‚ùå {str(e)}")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

app() 