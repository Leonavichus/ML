import streamlit as st
import pandas as pd
import altair as alt
from typing import Dict, List, Tuple, Callable, Any
from pandas.errors import EmptyDataError, ParserError
from sklearn.exceptions import NotFittedError
from src.model_churn import (
    train_churn_rf, load_churn_rf, enrich_churn_rf,
    train_churn_nn, load_churn_nn, enrich_churn_nn,
    train_churn_xgb, load_churn_xgb, enrich_churn_xgb,
    train_churn_lgbm, load_churn_lgbm, enrich_churn_lgbm
)
from logging import getLogger

logger = getLogger(__name__)

st.set_page_config(
    page_title="–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ | Analytics App",
    page_icon="üìâ",
    layout="wide"
)

# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
MODEL_OPTIONS: Dict[str, Tuple[str, Callable, Callable, Callable]] = {
    'Random Forest': ('rf', train_churn_rf, load_churn_rf, enrich_churn_rf),
    'Neural Network': ('nn', train_churn_nn, load_churn_nn, enrich_churn_nn),
    'XGBoost': ('xgb', train_churn_xgb, load_churn_xgb, enrich_churn_xgb),
    'LightGBM': ('lgbm', train_churn_lgbm, load_churn_lgbm, enrich_churn_lgbm),
}

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ç–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
REQUIRED_FIELDS: List[Tuple[str, str]] = [
    ("CreditScore", "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥"),
    ("Geography", "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
    ("Gender", "–ü–æ–ª"),
    ("Age", "–í–æ–∑—Ä–∞—Å—Ç"),
    ("Tenure", "–°—Ç–∞–∂ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"),
    ("Balance", "–ë–∞–ª–∞–Ω—Å"),
    ("NumOfProducts", "–ß–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
    ("HasCrCard", "–ï—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"),
    ("IsActiveMember", "–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"),
    ("EstimatedSalary", "–û—Ü–µ–Ω–æ—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"),
]


def create_visualization(df: pd.DataFrame, pred_col: str, prob_col: str) -> List[alt.Chart]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        df (pd.DataFrame): –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        pred_col (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        prob_col (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[alt.Chart]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    pie = alt.Chart(df).mark_arc(innerRadius=50).encode(
        theta="count()",
        color=alt.Color(
            f"{pred_col}:N",
            scale=alt.Scale(domain=[0, 1], range=["#4caf50", "#e91e63"]),
            legend=alt.Legend(title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞")
        ),
        tooltip=[
            alt.Tooltip(f"{pred_col}:N", title="–û—Ç—Ç–æ–∫"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("count():Q", title="–ü—Ä–æ—Ü–µ–Ω—Ç", format=".1%")
        ]
    ).properties(
        width=300,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Ç—Ç–æ–∫–∞"
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    hist = alt.Chart(df).mark_bar().encode(
        x=alt.X(
            f"{prob_col}:Q",
            bin=alt.Bin(maxbins=30),
            title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞"
        ),
        y=alt.Y(
            "count()",
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ),
        color=alt.Color(
            f"{pred_col}:N",
            scale=alt.Scale(domain=[0, 1], range=["#4caf50", "#e91e63"]),
            legend=alt.Legend(title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞")
        ),
        tooltip=[
            alt.Tooltip(f"{prob_col}:Q", title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", format=".2f"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç—Ç–æ–∫–∞"
    )

    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
    scatter = alt.Chart(df).mark_circle(size=60).encode(
        x=alt.X("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
        y=alt.Y("Balance:Q", title="–ë–∞–ª–∞–Ω—Å"),
        color=alt.Color(
            f"{pred_col}:N",
            scale=alt.Scale(domain=[0, 1], range=["#4caf50", "#e91e63"]),
            legend=alt.Legend(title="–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞")
        ),
        tooltip=[
            alt.Tooltip("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
            alt.Tooltip("Balance:Q", title="–ë–∞–ª–∞–Ω—Å", format=",.2f"),
            alt.Tooltip(f"{prob_col}:Q", title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞", format=".2%"),
            alt.Tooltip("Geography:N", title="–†–µ–≥–∏–æ–Ω"),
            alt.Tooltip("Gender:N", title="–ü–æ–ª")
        ]
    ).properties(
        width=600,
        height=400,
        title="–û—Ç—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å–∞"
    )

    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    region_analysis = alt.vconcat(
        # –í–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç—Ç–æ–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        alt.Chart(df).transform_density(
            f'{prob_col}',
            as_=[f'{prob_col}', 'density'],
            groupby=['Geography'],
            steps=100
        ).mark_area(
            opacity=0.6,
            interpolate='monotone'
        ).encode(
            x=alt.X(f'{prob_col}:Q', title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞'),
            y=alt.Y('density:Q', title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', stack=None),
            color=alt.Color('Geography:N', 
                          title='–†–µ–≥–∏–æ–Ω',
                          scale=alt.Scale(scheme='category10')),
            tooltip=[
                alt.Tooltip(f'{prob_col}:Q', title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', format='.2%'),
                alt.Tooltip('density:Q', title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å'),
                alt.Tooltip('Geography:N', title='–†–µ–≥–∏–æ–Ω')
            ]
        ).properties(
            width=600,
            height=200,
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç—Ç–æ–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º'
        ),
        # –ù–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        alt.Chart(df).transform_aggregate(
            total='count()',
            churned=f'sum(({pred_col} == 1)*1)',
            avg_prob=f'mean({prob_col})',
            avg_balance='mean(Balance)',
            groupby=['Geography']
        ).transform_calculate(
            churn_rate='datum.churned / datum.total'
        ).mark_bar().encode(
            x=alt.X('Geography:N', title='–†–µ–≥–∏–æ–Ω'),
            y=alt.Y('total:Q', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'),
            color=alt.Color('churn_rate:Q', 
                          title='–î–æ–ª—è –æ—Ç—Ç–æ–∫–∞',
                          scale=alt.Scale(scheme='redyellowgreen', reverse=True)),
            tooltip=[
                alt.Tooltip('Geography:N', title='–†–µ–≥–∏–æ–Ω'),
                alt.Tooltip('total:Q', title='–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'),
                alt.Tooltip('churned:Q', title='–£—à–µ–¥—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã'),
                alt.Tooltip('churn_rate:Q', title='–î–æ–ª—è –æ—Ç—Ç–æ–∫–∞', format='.2%'),
                alt.Tooltip('avg_prob:Q', title='–°—Ä. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', format='.2%'),
                alt.Tooltip('avg_balance:Q', title='–°—Ä. –±–∞–ª–∞–Ω—Å', format=',.2f')
            ]
        ).properties(
            width=600,
            height=200,
            title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ç–æ–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º'
        )
    ).properties(
        title={
            "text": "–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
            "fontSize": 16
        }
    )

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    product_analysis = alt.vconcat(
        # –í–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        alt.Chart(df).transform_aggregate(
            count='count()',
            churned=f'sum(({pred_col} == 1)*1)',
            groupby=['NumOfProducts', 'IsActiveMember']
        ).transform_calculate(
            churn_rate='datum.churned / datum.count'
        ).mark_bar().encode(
            x=alt.X('NumOfProducts:O', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'),
            y=alt.Y('count:Q', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'),
            color=alt.Color('IsActiveMember:N',
                          scale=alt.Scale(domain=[0, 1], range=['#ff9800', '#2196f3']),
                          title='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            tooltip=[
                alt.Tooltip('NumOfProducts:O', title='–ü—Ä–æ–¥—É–∫—Ç–æ–≤'),
                alt.Tooltip('count:Q', title='–ö–ª–∏–µ–Ω—Ç–æ–≤'),
                alt.Tooltip('churned:Q', title='–£—à–ª–∏'),
                alt.Tooltip('churn_rate:Q', title='–î–æ–ª—è –æ—Ç—Ç–æ–∫–∞', format='.2%'),
                alt.Tooltip('IsActiveMember:N', title='–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
            ]
        ).properties(
            width=600,
            height=200,
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
        ),
        # –ù–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫: –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞
        alt.Chart(df).transform_aggregate(
            avg_prob=f'mean({prob_col})',
            avg_balance='mean(Balance)',
            avg_tenure='mean(Tenure)',
            groupby=['NumOfProducts', 'IsActiveMember']
        ).mark_line(point=True).encode(
            x=alt.X('NumOfProducts:O', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'),
            y=alt.Y('avg_prob:Q', title='–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞', scale=alt.Scale(domain=[0, 1])),
            color=alt.Color('IsActiveMember:N',
                          scale=alt.Scale(domain=[0, 1], range=['#ff9800', '#2196f3']),
                          title='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
            tooltip=[
                alt.Tooltip('NumOfProducts:O', title='–ü—Ä–æ–¥—É–∫—Ç–æ–≤'),
                alt.Tooltip('avg_prob:Q', title='–°—Ä. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', format='.2%'),
                alt.Tooltip('avg_balance:Q', title='–°—Ä. –±–∞–ª–∞–Ω—Å', format=',.2f'),
                alt.Tooltip('avg_tenure:Q', title='–°—Ä. —Å—Ç–∞–∂', format='.1f'),
                alt.Tooltip('IsActiveMember:N', title='–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
            ]
        ).properties(
            width=600,
            height=200,
            title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
        )
    ).properties(
        title={
            "text": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "fontSize": 16
        }
    )

    return [pie, hist, scatter, region_analysis, product_analysis]


def read_user_data(uploaded_file: Any) -> pd.DataFrame:
    """
    –ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        uploaded_file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Streamlit

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º

    –í—ã–∑—ã–≤–∞–µ—Ç:
        ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ CSV –∏ Excel (.xlsx)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–µ –ø—É—Å—Ç–æ–π
        if df.empty:
            raise ValueError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
        if len(df.columns) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏")

        return df

    except EmptyDataError:
        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except ParserError:
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


def app():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –í—ã–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    - –í—ã–≥—Ä—É–∑–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    st.title("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    –í—ã –º–æ–∂–µ—Ç–µ:
    - –í—ã–±—Ä–∞—Ç—å –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    - –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    - –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    """)

    # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    st.markdown("### 1. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞:")

    model_name = st.selectbox(
        "–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
        options=list(MODEL_OPTIONS.keys()),
        index=0,
        help="–ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏"
    )
    key_prefix, train_fn, load_fn, enrich_fn = MODEL_OPTIONS[model_name]

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if st.button(f"–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å {model_name}", help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        try:
            with st.spinner(f"–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å {model_name}..."):
                df_raw = pd.read_csv("data/raw/churn.csv")
                model, grid = train_fn(df_raw, save=True)
            st.success(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! üéâ (ROC-AUC: {grid.best_score_:.3f})")
        except FileNotFoundError:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

    st.markdown("---")

    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### 2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

    uploaded = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV/Excel —Å –¥–∞–Ω–Ω—ã–º–∏",
        type=["csv", "xlsx"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã CSV –∏ Excel (.xlsx)"
    )

    if not uploaded:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_user = read_user_data(uploaded)

        st.markdown("### 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
        st.markdown("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –∏ —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏:")

        cols = df_user.columns.tolist()
        mapping = {}

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        col1, col2 = st.columns(2)
        for i, (field, label) in enumerate(REQUIRED_FIELDS):
            with col1 if i % 2 == 0 else col2:
                mapping[field] = st.selectbox(
                    f"{label} ‚Üí",
                    options=["<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>"] + cols,
                    key=f"map_{key_prefix}_{field}",
                    help=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ {label}"
                )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        missing = [label for field, label in REQUIRED_FIELDS if mapping[field] == "<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>"]
        if missing:
            st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:\n- " + "\n- ".join(missing))
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            df_mapped = df_user.rename(columns={mapping[field]: field for field, _ in REQUIRED_FIELDS})

            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"):
                st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π:", df_mapped.head())

            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                model = load_fn()
                df_enriched = enrich_fn(df_mapped, model)

                if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                    st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:", df_enriched.head())

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ç–æ–∫—É
                total = len(df_enriched)
                churn = (df_enriched["Exited_Pred"] == 1).sum()
                loyal = total - churn

                st.markdown("### 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total)
                with col2:
                    st.metric("–õ–æ—è–ª—å–Ω—ã–µ", loyal)
                with col3:
                    st.metric("–°–∫–ª–æ–Ω–Ω—ã–µ –∫ –æ—Ç—Ç–æ–∫—É", churn)

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                st.markdown("### 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                charts = create_visualization(
                    df_enriched,
                    pred_col="Exited_Pred",
                    prob_col="Exited_Prob"
                )
                for chart in charts:
                    st.altair_chart(chart)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.markdown("### 6. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                csv_data = df_enriched.to_csv(index=False).encode("utf-8")
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (CSV)",
                    data=csv_data,
                    file_name=f"churn_enriched_{key_prefix}.csv",
                    mime="text/csv",
                    help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
                )

            except FileNotFoundError:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            except NotFittedError:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    except ValueError as e:
        st.error(f"‚ùå {str(e)}")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

app() 