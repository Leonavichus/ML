import streamlit as st
import pandas as pd
import altair as alt
from typing import Dict, List, Tuple, Callable, Union
from pandas.errors import EmptyDataError, ParserError
from streamlit.runtime.uploaded_file_manager import UploadedFile
from src.model_segmentation import (
    train_kmeans, train_gmm, train_nn_segmentation,
    enrich_segmentation
)
from logging import getLogger

logger = getLogger(__name__)

st.set_page_config(
    page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ | Analytics App",
    page_icon="üë•",
    layout="wide"
)

# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
METHODS: Dict[str, Tuple[str, Callable]] = {
    'KMeans': ('kmeans', train_kmeans),  # –ú–µ—Ç–æ–¥ k-—Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    'Gaussian Mixture': ('gmm', train_gmm),  # –ì–∞—É—Å—Å–æ–≤—ã —Å–º–µ—Å–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    'Neural Network': ('nn', train_nn_segmentation)  # –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
}

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
REQUIRED_FIELDS_SEG: List[Tuple[str, str]] = [
    ('CustomerDOB', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'),
    ('CustGender', '–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞'),
    ('CustLocation', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞'),
    ('CustAccountBalance', '–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞'),
    ('TransactionAmount', '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞')
]


def create_visualizations(df: pd.DataFrame) -> List[alt.Chart]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        df (pd.DataFrame): –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[alt.Chart]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    pie = alt.Chart(df).mark_arc(innerRadius=50).encode(
        theta=alt.Theta("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"),
        color=alt.Color(
            "SegmentName:N",
            title="–°–µ–≥–º–µ–Ω—Ç",
            scale=alt.Scale(scheme="category10")
        ),
        tooltip=[
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("count():Q", title="–î–æ–ª—è", format=".1%")
        ]
    ).properties(
        width=300,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
    )

    # –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–æ–∑—Ä–∞—Å—Ç/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    scatter = alt.Chart(df.sample(min(1000, len(df)))).mark_circle(
        size=60,
        opacity=0.6
    ).encode(
        x=alt.X("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
        y=alt.Y("TransactionAmount:Q", title="–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
        color=alt.Color(
            "SegmentName:N",
            title="–°–µ–≥–º–µ–Ω—Ç",
            scale=alt.Scale(scheme="category10")
        ),
        tooltip=[
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
            alt.Tooltip("TransactionAmount:Q", title="–°—É–º–º–∞", format=",.2f"),
            alt.Tooltip("CustLocation:N", title="–†–µ–≥–∏–æ–Ω"),
            alt.Tooltip("CustGender:N", title="–ü–æ–ª")
        ]
    ).properties(
        width=600,
        height=400,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ —Å—É–º–º–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    hist = alt.Chart(df).mark_bar(opacity=0.6).encode(
        x=alt.X(
            "CustAccountBalance:Q",
            bin=alt.Bin(maxbins=30),
            title="–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞"
        ),
        y=alt.Y(
            "count()",
            stack=None,
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ),
        color=alt.Color(
            "SegmentName:N",
            title="–°–µ–≥–º–µ–Ω—Ç",
            scale=alt.Scale(scheme="category10")
        ),
        tooltip=[
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("CustAccountBalance:Q", title="–ë–∞–ª–∞–Ω—Å", format=",.2f")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
    )

    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    heatmap = alt.Chart(df).mark_rect().encode(
        x=alt.X("CustLocation:N", title="–†–µ–≥–∏–æ–Ω"),
        y=alt.Y("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
        color=alt.Color(
            "count()",
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            scale=alt.Scale(scheme="viridis")
        ),
        tooltip=[
            alt.Tooltip("CustLocation:N", title="–†–µ–≥–∏–æ–Ω"),
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("count():Q", title="–î–æ–ª—è –≤ —Ä–µ–≥–∏–æ–Ω–µ", format=".1%")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"
    )

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
    gender = alt.Chart(df).mark_bar().encode(
        x=alt.X("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
        y=alt.Y("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"),
        color=alt.Color("CustGender:N", title="–ü–æ–ª"),
        tooltip=[
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("CustGender:N", title="–ü–æ–ª"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            alt.Tooltip("count():Q", title="–î–æ–ª—è", format=".1%")
        ]
    ).properties(
        width=600,
        height=300,
        title="–ì–µ–Ω–¥–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
    )

    # –ë–æ–∫—Å–ø–ª–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    boxplot = alt.Chart(df).mark_boxplot().encode(
        x=alt.X("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
        y=alt.Y("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
        color=alt.Color(
            "SegmentName:N",
            title="–°–µ–≥–º–µ–Ω—Ç",
            scale=alt.Scale(scheme="category10")
        ),
        tooltip=[
            alt.Tooltip("SegmentName:N", title="–°–µ–≥–º–µ–Ω—Ç"),
            alt.Tooltip("Age:Q", title="–í–æ–∑—Ä–∞—Å—Ç"),
            alt.Tooltip("count()", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        ]
    ).properties(
        width=600,
        height=300,
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
    )

    return [pie, scatter, hist, heatmap, gender, boxplot]


def read_user_data(uploaded_file: Union[UploadedFile, str]) -> pd.DataFrame:
    """
    –ß—Ç–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        uploaded_file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Streamlit –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º

    –í—ã–∑—ã–≤–∞–µ—Ç:
        ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        if isinstance(uploaded_file, str):
            if uploaded_file.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            elif uploaded_file.endswith('.xlsx'):
                df = pd.read_excel(uploaded_file)
            else:
                raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ CSV –∏ Excel (.xlsx)")
        else:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith('.xlsx'):
                df = pd.read_excel(uploaded_file)
            else:
                raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ CSV –∏ Excel (.xlsx)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–µ –ø—É—Å—Ç–æ–π
        if df.empty:
            raise ValueError("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
        if len(df.columns) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏")

        return df

    except EmptyDataError:
        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except ParserError:
        raise ValueError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


def app():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    - –í—ã–≥—Ä—É–∑–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    st.title('–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    –í—ã –º–æ–∂–µ—Ç–µ:
    - –í—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    - –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    - –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    """)

    # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
    st.markdown("### 1. –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:")

    method_name = st.selectbox(
        '–ú–µ—Ç–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏',
        list(METHODS.keys()),
        help="–ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"
    )
    method_key, train_fn = METHODS[method_name]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    st.markdown("### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    n_clusters = st.slider(
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤',
        min_value=2,
        max_value=10,
        value=4,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã"
    )

    st.markdown("### 3. –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")

    available_features = [
        'CustAccountBalance',
        'TransactionAmount',
        'Age',
        'CustGender',
        'CustLocation'
    ]
    selected_features = st.multiselect(
        '–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏',
        available_features,
        default=['CustAccountBalance', 'TransactionAmount', 'Age'],
        help="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è"
    )

    if not selected_features:
        st.warning('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏')
        return

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if st.button(
            f'–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å {method_name}',
            help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    ):
        try:
            with st.spinner(f'–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å {method_name} —Å {n_clusters} —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏...'):
                df_raw = pd.read_csv('data/raw/transactions.csv')
                train_fn(
                    df_raw,
                    n_clusters=n_clusters,
                    features=selected_features,
                    save=True
                )
            st.success(f'–ú–æ–¥–µ–ª—å {method_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! üéâ')
        except FileNotFoundError:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            st.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}')

    st.markdown('---')

    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### 4. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")

    uploaded = st.file_uploader(
        '–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV/Excel —Å –¥–∞–Ω–Ω—ã–º–∏',
        type=['csv', 'xlsx'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã CSV –∏ Excel (.xlsx)"
    )

    if not uploaded:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_user = read_user_data(uploaded)

        st.markdown("### 5. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
        st.markdown("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –∏ —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏:")

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        cols = df_user.columns.tolist()
        mapping = {}
        col1, col2 = st.columns(2)

        for i, (field, label) in enumerate(REQUIRED_FIELDS_SEG):
            with col1 if i % 2 == 0 else col2:
                mapping[field] = st.selectbox(
                    f'{label} ‚Üí',
                    ['<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>'] + cols,
                    key=f'map_seg_{field}',
                    help=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ {label}"
                )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
        missing = [lbl for fld, lbl in REQUIRED_FIELDS_SEG if mapping[fld] == '<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>']
        if missing:
            st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:\n- " + "\n- ".join(missing))
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            df_mapped = df_user.rename(columns={mapping[f]: f for f, _ in REQUIRED_FIELDS_SEG})

            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"):
                st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π:", df_mapped.head())

            try:
                df_enriched = enrich_segmentation(df_mapped, method_key)

                if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                    st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:", df_enriched.head())

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                total = len(df_enriched)
                segments = df_enriched["SegmentName"].value_counts()

                st.markdown("### 6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total)
                with col2:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤", len(segments))

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                st.markdown("#### –†–∞–∑–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤:")
                for segment, count in segments.items():
                    st.metric(
                        segment,
                        f"{count} ({count / total * 100:.1f}%)"
                    )

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                st.markdown("### 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                charts = create_visualizations(df_enriched)
                for chart in charts:
                    st.altair_chart(chart)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.markdown("### 8. –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                csv = df_enriched.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (CSV)",
                    csv,
                    f"segmented_{method_key}.csv",
                    mime="text/csv",
                    help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"
                )

            except FileNotFoundError:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                st.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')

    except ValueError as e:
        st.error(f"‚ùå {str(e)}")
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')

app() 