import ollama
import streamlit as st
import torch
from typing import Generator, List, Dict
from logging import getLogger
import time

logger = getLogger(__name__)

st.set_page_config(
    page_title="–ß–∞—Ç | Analytics App",
    page_icon="üí¨",
    layout="wide"
)

def get_available_models() -> List[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ Ollama.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

    –í—ã–∑—ã–≤–∞–µ—Ç:
        Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ Ollama
    """
    try:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π..."):
            response = ollama.list()
            models = [model.model for model in response.models]
            if not models:
                raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ Ollama")
            return models
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        raise


def generate_response(model: str, messages: List[Dict[str, str]]) -> Generator[str, None, None]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        model (str): –ò–º—è –º–æ–¥–µ–ª–∏ Ollama –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        messages (List[Dict[str, str]]): –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –ß–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
    """
    try:
        for chunk in ollama.chat(
                model=model,
                messages=messages,
                stream=True
        ):
            yield chunk["message"]["content"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        yield f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."


def clear_chat_history():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    st.session_state.messages = []


def app():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–∞—Ç–∞."""
    st.title("üí¨ –ß–∞—Ç")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", use_container_width=True):
            clear_chat_history()

        st.divider()
        st.markdown("""
        ### üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–Ω–∏–∑—É
        3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏

        ### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å Ollama
        - –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: """ + ("üñ•Ô∏è CPU" if torch.cuda.is_available() else "üéÆ GPU"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "messages" not in st.session_state:
        st.session_state.messages = []

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        models = get_available_models()
        if "model" not in st.session_state or st.session_state.model not in models:
            st.session_state.model = models[0]

        st.session_state.model = st.selectbox(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞",
            models,
            index=models.index(st.session_state.model)
        )

        st.divider()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_container = st.container()
        with chat_container:
            for msg in st.session_state.messages:
                icon = "üßë‚Äçüíª" if msg["role"] == "user" else "ü§ñ"
                with st.chat_message(msg["role"], avatar=icon):
                    st.markdown(msg["content"])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        user_input = st.chat_input("üí≠ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        if user_input:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append({"role": "user", "content": user_input})
            with st.chat_message("user", avatar="üßë‚Äçüíª"):
                st.markdown(user_input)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            with st.chat_message("assistant", avatar="ü§ñ"):
                full_response = ""
                message_placeholder = st.empty()

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                with st.spinner("ü§î –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
                    for response_chunk in generate_response(st.session_state.model, st.session_state.messages):
                        full_response += response_chunk
                        message_placeholder.markdown(full_response + "‚ñå")
                        time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏

                    message_placeholder.markdown(full_response)
                st.session_state.messages.append({"role": "assistant", "content": full_response})

    except Exception as e:
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–∞—Ç–∞")
        st.info("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É Ollama")

app() 